TIP : Work with Maven projects is good for dependency updations.

Refer project : "SpringTelusko" // MVN project
pom.xml, classes[App.java, Car.java, Bike.java], interface[Vehicle.java], abc.xml[bean file]

Steps:
	1) create a new Maven Project
	2) select quickstart
	3) in xml include dependency of spring framework





#PROBLEM : We need either bike or car. but for that in "App.java" file we have to change object & constructor on both sides.

"pom.xml" file : 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.telusko</groupId>
  <artifactId>spring</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>spring</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- THIS IS ADDED FOR SPRING FRAMEWORK FROM GOOGLE -->
	<dependency>
    	<groupId>org.springframework</groupId>
    	<artifactId>spring-context</artifactId>
    	<version>5.3.18</version>
	</dependency>

  </dependencies>
</project>


"Bike.java" file
package com.telusko.spring;
public class Bike {
	public void drive() {
		System.out.println("You are on 2 wheeler...");
	}
}

"Car.java" file
package com.telusko.spring;
public class Car {
	public void drive() {
		System.out.println("You are in 4 wheeler...");
	}
}


"App.java" file
package com.telusko.spring;
public class App {
	public static void main(String[] args) {		
		// for Car
		/*
		Car obj = new Car(); 
		obj.drive();	// o/p : You are in 4 wheeler...
		*/

		// for Bike
		Bike obj = new Bike();
		obj.drive();	// o/p : You are on 2 wheeler...
	}
}





# Aam Solution : create an interface Vehicle so, now you have to just change right side(making new object(constructor) side) in "App.java" file

"pom.xml" file : // no change

"Vehicle.java" file
package com.telusko.spring;
public interface Vehicle {
	void drive();
}

"Bike.java" file
package com.telusko.spring;
public class Bike implements Vehicle {
	public void drive() {
		System.out.println("You are on 2 wheeler...");
	}
}

"Car.java" file
package com.telusko.spring;
public class Car implements Vehicle {
	public void drive() {
		System.out.println("You are in 4 wheeler...");
	}
}


"App.java" file
package com.telusko.spring;
public class App {
	public static void main(String[] args) {		
		// for Car
		/*
		Vehicle obj = new Car(); 	// only right side we are changing
		obj.drive();	// o/p : You are in 4 wheeler...
		*/

		// for Bike
		Vehicle obj = new Bike();
		obj.drive();	// o/p : You are on 2 wheeler...
	}
}






but, why we are changing even right side?




# Menots Solution : Spring-framework(make an xml file for configuration of car & bike)

"pom.xml" file : //no change

"bean.xml" file :
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id="vehicle" class="com.telusko.spring.Bike"></bean>
</beans>

NOTE: for <beans> we have to give definitions as i wrote above(you can google it.)

"Vehicle.java" file : // No change

"Car.java" file : // no change

"Bike.java" file : // no change

"App.java" file :
package com.telusko.spring;
import org.springframework.context.ApplicationContext; // required to use getBean()
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class App {
	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
		Vehicle obj = (Vehicle) context.getBean("vehicle"); 
		// EITHER getBean() could be used from BeanFactory OR ApplicationContext
		/* ApplicationContext is a super set of BeanFactory. for small projects we can use BeanFactory. but here we'll practice not for small. so, we'll use ApplicationContext. */
		obj.drive();
	}
}

Output:
You are on 2 wheeler...

// It's based on "bean.xml" file.
// As we mentioned class="com.telusko.spring.Bike", so, o/p will be based on Bike class






# Advantages:
	=> We don't have to make change in "App.java" file.
	=> We are just changing class attribute in "bean.xml" file.
	
	# MAIN BIG ADVANTAGE:
		=> if we change anything "App.java" file, then "App.java" must be re-compiled.
		=> but, now we are changing "bean.xml" instead of "App.java".




# Configuration can be done by 3 ways :
	1) XML Config. (Which we did)
	2) Annotation based Config.
	3) JAVA Config.



Project reference : "SpringTeluskoAnnotationConf"
# Annotation based Configuration
"pom.xml" file : //no change

"bean.xml" file :
in <beans> tag add following:
	1) xmlns:context="http://www.springframework.org/schema/context"
& in xsi:schemaLocation add following links:
	1) http://www.springframework.org/schema/context
	2) http://www.springframework.org/schema/context/spring-context.xsd

"Vehicle.java" file : // No change

"Car.java" file : // add @Component
package com.telusko.SpringTeluskoAnnotationConf;
import org.springframework.stereotype.Component; // import for @Component
@Component
public class Car implements Vehicle {
	public void drive() {
		System.out.println("You are in 4 wheeler...");
	}
}


"Bike.java" file : // add @Component
package com.telusko.SpringTeluskoAnnotationConf;
import org.springframework.stereotype.Component; // import for @Component
@Component
public class Bike implements Vehicle {
	public void drive() {
		System.out.println("You are on 2 wheeler...");
	}
}


"App.java" file :
package com.telusko.SpringTeluskoAnnotationConf;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class App {
	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
		Vehicle obj = (Vehicle) context.getBean("bike"); // write bike instead of Bike OR car instead of Car
		obj.drive();
	}
}







# add property of tyre in vehicles using SETTER method
Project refer : SpringTeluskoPropertyTyre

"pom.xml" file : // no change

create new file "Tyre.java" :
package com.telusko.SpringTeluskoPropertyTyre;
public class Tyre {
	private String brand;
	public String getBrand() {
		return brand;
	}
	public void setBrand(String brand) {
		this.brand = brand;
	}
	@Override
	public String toString() {
		return "Tyre [brand=" + brand + "]";
	}
}

"bean.xml" file :
=> add following in <beans> :
	<bean id="tyre" class="com.telusko.SpringTeluskoPropertyTyre.Tyre">
		<property name="brand" value="MRF"></property>
	</bean>

"Vehicle.java", "Car.java", "Bike.java" files not required

"App.java" file :
package com.telusko.SpringTeluskoPropertyTyre;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class App {
	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext("bean.xml");
//		Vehicle obj = (Vehicle) context.getBean("bike");
//		obj.drive();
		Tyre t = (Tyre) context.getBean("tyre");
		System.out.println(t);
	}
}

O/P:
Tyre [brand=MRF]


=> to change brand just change bean.xml <property value="CEAT_tyres">
=> whenever we are using <property value="">, we are actually using setter method[setBrand(String brand)].
=> we can not assign using only setter(), we can also assign using constructor.
=> whenever we use setter() it's called "SETTER INJECTION"
=> whenever we use constructor() it's called "CONSTRUCTOR INJECTION"
=> how to use Constructor Injection? 




Project refer : SpringTeluskoPropertyTyreUsingConstructor
# add property of tyre in vehicles using CONSTRUCTOR INJECTION

"pom.xml" file: // no change

"App.java" file : // no change

"Tyre.java" file : // add constructor using source as following
// GETTER-SETTER no more needed
public Tyre(String brand) {
		super();
		this.brand = brand;
	}

"bean.xml" file : // we can't set constructor property using <property>
// add following in <bean>
<constructor-arg value="CEAT"></constructor-arg>